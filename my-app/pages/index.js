import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import {providers, utils, Contract} from 'ethers'
import {NFT_CONTRACT_ADDR,NFT_CONTRACT_ABI,CryptoDevDAO_ADDR,CryptoDevDAO_ABI} from '../constants'
import { useRef, useEffect, useState } from 'react'
import Web3Modal from 'web3modal'

export default function Home() {
  
  const [walletConnected, setWalletConnected] =  useState(false);
  const [loading, setLoading] = useState(false);
  const [nftBalance, setNftBalance] = useState(0);
  const [treasuryBalance, setTreasuryBalance] = useState("0");
  const [numOfProposals, setNumberOfProposals] = useState("0");
  const [fakeNftId, setFakeNftId] = useState("");
  const web3ModalRef = useRef();


  const getProviderOrSigner = async(needSigner=false) =>{
    const provider = await web3ModalRef.current.connect();
    const web3Provider = await providers.Web3Provider(provider);
    const {chainId} = await web3Provider.getNetwork();
    if(chainId!==4) {
      window.alert("Plese switch to the Rinkeby network.");
      throw new Error("Plese switch to the Rinkeby network.");
    }
    if(needSigner){
      const signer = await web3Provider.getSinger();
      return signer;
    }
    return web3Provider;
  }


  const getNftContractInstance = async(providerOrSinger) => {
    return new Contract(
      NFT_CONTRACT_ADDR,
      NFT_CONTRACT_ADDR,
      providerOrSinger
    );
  }

  const getDAOContractInstance = async(providerOrSinger) => {
    return new Contract(
      CryptoDevDAO_ADDR,
      CryptoDevDAO_ABI,
      providerOrSinger
    );
  }

  const getDAOTreasuryBalance = async () =>{
    try {
      const provider = await getProviderOrSigner();
      const balance = await provider.getBalance(CryptoDevDAO_ADDR);
      setTreasuryBalance(balance);
    } catch (err) {
      console.log(err);
    }
  }

  const getNumberOfDAOProposals = async () =>{
    try {
      const provider = await getProviderOrSigner();
      const daoContract = getDAOContractInstance(provider);
      const numOfProposals = await daoContract.numProposals();
      setNumberOfProposals(parseInt(numOfProposals.toString()));
    } catch (err) {
      console.log(err);
    }
  }

  const getNftBalance = async () =>{
    try {
      const signer = await getProviderOrSigner(true);
      const nftContract =    getNftContractInstance(signer);
      const address = await signer.getAddress();
      const balance = await nftContract.balanceOf(address);
      setNftBalance(parseInt(balance.toString()));
    } catch (err) {
      console.log(err);
    }
  }


  const createProposal = async (fakeNftId) =>{
    try {
      const signer = await getProviderOrSigner(true);
      const daoContract = getDAOContractInstance(signer);
      const tx = await daoContract.createProposal(fakeNftId);
      setLoading(true);
      await tx.wait();
      await getNumberOfDAOProposals();
      setLoading(false);
    } catch (err) {
      console.log(err);
    }
  }
  

  const fetchProposalById = async (id) =>{
    try {
      const provider = await getProviderOrSigner();
      const daoContract = getDAOContractInstance(provider);

    } catch (err) {
      console.log(err);
    }
  }


  const connectWallet = async()=>{
    try {
      await getProviderOrSigner();
      setWalletConnected(true);
    } catch (err) {
      console.log(err);
    }
  }
  
  useEffect(()=>{
    if(!walletConnected){
      web3ModalRef.current = new Web3Modal({
        network:"rinkeby",
        providerOptions:[],
        disableInjectedProvider:false,
      });
      connectWallet().then(()=>{
        getDAOTreasuryBalance();
        getNftBalance();
        getNumberOfDAOProposals();
      });
    }
  },[walletConnected]);
  
  
  
  
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        
      </main>

      <footer className={styles.footer}>
        Made with ‚ù§ by Vishal @ 2022
      </footer>
    </div>
  )
}
